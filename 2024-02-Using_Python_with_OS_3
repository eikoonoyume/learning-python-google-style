# Regular Expressions = regex/regexp, search query for text expressed by string pattern
log = "July 31 07:51:48 mycomputer bad_process[12345]: ERROR Performing package upgrade"
# extract process ID by using index method to find first square bracket
# to not capture square brackets, start with next index, include 5 more characters after
index = log.index("[")
print(log[index+1:index+6])
# output: 12345

# extract process ID in more robust fashion
# RE module: allows use of search function to find regex inside strings
import re
log = "July 31 07:51:48 mycomputer bad_process[12345]: ERROR Performing package upgrade"
# r"\[(\d+)\]" = string enclosed in square brackets, followed by 1+ digits
regex = r"\[(\d+)\]"
# re.search() function searches string log for match to regex, returns a Match object that has group() method, or None. Group number returns by result[1]
result = re.search(regex, log)
print(result[1])
# output: 1234

# Basic Matching with grep
# command line tool grep = prints any line that matches query, powerful tool for applying regex
# find words inside /usr/share/dict/words file, this file is used by spell-checking programs to verify if words exists or not, one word per line
# looking for "thon" 
grep thon /usr/share/dict/words
# string passing through grep is CASE SENSITIVE, must match exactly
# use -i parameter to match regardless of case
grep -i python/usr/share/dict/words
# use ".", dot = wildcard that can be replaced by any character in the results
grep l.rts /usr/share/dict/words
# output: alerts, blurts, flirts
# caret/circumflex ^ = indicates beginning of line that regex should match
# dollar sign $ = indicates the end of the line
# look for all words that start with string fruit
grep ^fruit /usr/share/dict/words
# look for all words that end with cat
grep cat$ /usr/share/dict/words

# Simple Matching in Python
